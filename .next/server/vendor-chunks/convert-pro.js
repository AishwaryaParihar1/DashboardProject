"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/convert-pro";
exports.ids = ["vendor-chunks/convert-pro"];
exports.modules = {

/***/ "(ssr)/./node_modules/convert-pro/convert.js":
/*!*********************************************!*\
  !*** ./node_modules/convert-pro/convert.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nexports.__esModule = true;\nexports.stringToAmountsDegrees = exports.findBest = exports.convertT = exports.convertBet = exports.fix = exports.unitIndexByName = exports.amountToString = exports.dStringToAmounts = exports.convertCreator = exports.force = exports.bytes = exports.degrees = exports.pressure = exports.mass = exports.frequency = exports.energy = exports.temperature = exports.time = exports.volume = exports.area = exports.length = void 0;\n/* auto-gen end */\n// default options\nvar dOp = {\n    base: 1000,\n    lowerCase: false,\n    shortcut: true,\n    accuracy: 5\n};\nfunction higherDim(unitGroup, dim) {\n    var result = [];\n    var str = dim === 2 ? \"Square \" : \"Cubic \";\n    for (var i = 0; i < unitGroup.length; i++) {\n        var item = unitGroup[i];\n        result.push([str + item[0], str + item[1], item[2] + dim, Math.pow(item[3], dim)]);\n    }\n    return result;\n}\nexports.length = [\n    [\"Femtometer\", \"Femtometers\", \"FM\", 1e-15, 7],\n    [\"Picometer\", \"Picometers\", \"PM\", 1e-12],\n    [\"Nanometer\", \"Nanometers\", \"NM\", 1e-9],\n    [\"Micrometer\", \"Micrometers\", \"uM\", 1e-6],\n    [\"Millimeter\", \"Millimeters\", \"MM\", 0.001],\n    [\"Centimeter\", \"Centimeters\", \"CM\", 0.01],\n    [\"Meter\", \"Meters\", \"M\", 1],\n    [\"Kilometer\", \"Kilometers\", \"KM\", 1000],\n    [\"Inch\", \"Inches\", \"IN\", 0.0254],\n    [\"Foot\", \"Feet\", \"FT\", 0.3048],\n    [\"Yard\", \"Yards\", \"YD\", 0.9144],\n    [\"Mile\", \"Miles\", \"MI\", 1609.344],\n    [\"Nautical Mile\", \"Nautical Miles\", \"NMI\", 1852],\n    [\"Astronomical Unit\", \"Astronomical Units\", \"AU\", 149597870700],\n    [\"Light Year\", \"Light Years\", \"LY\", 9460730472580800],\n    [\"Parsec\", \"Parsecs\", \"PC\", 30856775814913673],\n];\nexports.area = __spreadArrays(higherDim(exports.length, 2), [\n    [\"Acre\", \"Acres\", \"Ac\", 4046.86],\n    [\"Deciare\", \"Deciares\", \"Da\", 10],\n    [\"Are\", \"Ares\", \"Are\", 100],\n    [\"Decare\", \"Decares\", \"Decare\", 1000],\n]);\nexports.volume = __spreadArrays(higherDim(exports.length, 3), [\n    [\"Liter\", \"Liters\", \"L\", 0.001],\n    [\"MilliLiter\", \"MilliLiter\", \"ML\", 1e-6],\n    [\"Fluid Once\", \"Fluid Once\", \"fl-oz\", 0.00002841312686461145],\n    [\"Table Spoon\", \"Table Spoons\", \"tbsp\", 0.000017758204290382156],\n    [\"Tea Spoon\", \"Tea Spoons\", \"tsp\", 0.000005919401430127385],\n]);\nexports.time = [\n    [\"Femtosecond\", \"Femtoseconds\", \"FS\", 1e-15, 11],\n    [\"Picosecond\", \"Picoseconds\", \"PS\", 1e-12],\n    [\"Nanosecond\", \"Nanoseconds\", \"NS\", 1e-9],\n    [\"Microsecond\", \"Microseconds\", \"uS\", 1e-6],\n    [\"Millisecond\", \"Milliseconds\", \"MS\", 0.001],\n    [\"Second\", \"Seconds\", \"S\", 1],\n    [\"Minute\", \"Minutes\", \"Min\", 60],\n    [\"Hour\", \"Hours\", \"H\", 3600],\n    [\"Day\", \"Days\", \"H\", 86400],\n    [\"Week\", \"Weeks\", \"H\", 604800],\n    [\"Month\", \"Months\", \"M\", 2628000],\n    [\"Year\", \"Years\", \"Y\", 31556952],\n    [\"Fortnight\", \"Fortnights\", \"Fn\", 1209600],\n    [\"Decade\", \"Decades\", \"Dec\", 315569520],\n    [\"Century\", \"Centuries\", \"Cn\", 3155695200],\n    [\"Millennium\", \"Millenniums\", \"Ml\", 31556952000],\n    [\"Shake\", \"Shakes\", \"Sk\", 1e-8],\n    [\"Time Unit\", \"Time Units\", \"TU\", 0.001024],\n];\nexports.temperature = [\n    [\"Kelvin\", \"Kelvin\", \"K\", 1, 0],\n    // from cel to kel\n    [\"Celsius\", \"Celsius\", \"C\", 1, 273.15],\n    [\"Fahrenheit\", \"Fahrenheit\", \"F\", 0.55555556, 255.37222],\n    [\"Rankine\", \"Rankine\", \"R\", 0.555556, 0],\n    [\"Delisle\", \"Delisles\", \"De\", 0.66666667, 339.816666667],\n];\nexports.energy = [\n    [\"Joule\", \"Joules\", \"J\", 1, 1],\n    [\"Kilojoule\", \"Kilojoules\", \"KJ\", 1000],\n    [\"Calorie\", \"Calories\", \"Cal\", 4.184, 1],\n    [\"Kilocalorie\", \"Kilocalories\", \"KCal\", 4184],\n    [\"Watt-hour\", \"Watt-hour\", \"Wh\", 3600, 1],\n    [\"KiloWatthour\", \"KiloWatthour\", \"kWh\", 3600000],\n    [\"Electronvolt\", \"Electronvolt\", \"eV\", 1.602176634e-19, 4],\n    [\"Kilo-electronvolt\", \"Kilo-electronvolt\", \"KeV\", 1.602176634e-16],\n    [\"Mega-electronvolt\", \"Mega-electronvolt\", \"MeV\", 1.602176634e-13],\n    [\"Giga-electronvolt\", \"Giga-electronvolt\", \"MeV\", 1.602176634e-10],\n    [\"Tera-electronvolt\", \"Tera-electronvolt\", \"TeV\", 1.602176634e-7],\n    [\"British Thermal Unit\", \"British Thermal Units\", \"Btu\", 1055.06],\n    [\"Foot-pound\", \"Foot-pounds\", \"ft-lb\", 1.355818],\n];\nexports.frequency = [\n    [\"Hertz\", \"Hertz\", \"Hz\", 1, 3],\n    [\"Kilohertz\", \"kilohertz\", \"kHz\", 1000],\n    [\"Megahertz\", \"Megahertz\", \"mHz\", 1000000],\n    [\"Gigahertz\", \"Gigahertz\", \"gHz\", 1000000000],\n];\nexports.mass = [\n    [\"Femtogram\", \"Femtograms\", \"Fg\", 1e-15, 6],\n    [\"Picogram\", \"Picograms\", \"Pg\", 1e-12],\n    [\"Nanogram\", \"Nanograms\", \"Ng\", 1e-9],\n    [\"Microgram\", \"Micrograms\", \"ug\", 1e-6],\n    [\"Milligram\", \"Milligrams\", \"mg\", 0.001],\n    [\"Gram\", \"Grams\", \"g\", 1],\n    [\"Kilogram\", \"Kilograms\", \"Kg\", 1000],\n    [\"Ton\", \"Tons\", \"T\", 1000000],\n    [\"Stone\", \"Stones\", \"ST\", 6350.29],\n    [\"Pound\", \"Pounds\", \"LB\", 553.592],\n    [\"Ounce\", \"Ounces\", \"OZ\", 28.3495],\n];\nexports.pressure = [\n    [\"atmosphere\", \"atmospheres\", \"atm\", 1],\n    [\"Bar\", \"Bars\", \"bar\", 0.986923],\n    [\"Pascal\", \"Pascals\", \"Pa\", 0.00000986923],\n    [\"Pound per square inch\", \"Pound per square inch\", \"psi\", 0.068046],\n    [\"torr\", \"torr\", \"torr\", 0.00131579],\n];\nexports.degrees = [\n    [\"degree\", \"degrees\", \"Â°\", 1],\n    [\"arcminute\", \"arcminutes\", \"'\", 1 / 60],\n    [\"arcsecond\", \"seconds\", \"''\", 1 / 3600],\n    [\"degree\", \"degrees\", \"d\", 1],\n    [\"radian\", \"radians\", \"r\", 180 / Math.PI],\n    [\"gradian\", \"gradians\", \"g\", 0.9],\n    [\"milliradian\", \"milliradians\", \"mrad\", 180 / Math.PI / 1000],\n];\nexports.bytes = [\n    [\"bit\", \"bits\", \"bit\", 1 / 8],\n    [\"byte\", \"bytes\", \"B\", 1],\n    [\"Kilobyte\", \"kilobytes\", \"KB\", 1000],\n    [\"Megabyte\", \"Megabytes\", \"MB\", Math.pow(1000, 2)],\n    [\"Gigabyte\", \"Gigabytes\", \"GB\", Math.pow(1000, 3)],\n    [\"terabyte\", \"Terabytes\", \"TB\", Math.pow(1000, 4)],\n    [\"petabyte\", \"Petabytes\", \"PB\", Math.pow(1000, 5)],\n    [\"Kibibyte\", \"Kibibytes\", \"KiB\", 1024],\n    [\"Mebibyte\", \"Mebibytes\", \"MiB\", Math.pow(1024, 2)],\n    [\"Gibibyte\", \"Gibibytes\", \"GiB\", Math.pow(1024, 3)],\n    [\"Tebibyte\", \"Tebibytes\", \"TiB\", Math.pow(1024, 4)],\n    [\"Pebibyte\", \"Pebibytes\", \"PiB\", Math.pow(1024, 5)],\n];\nexports.force = [\n    [\"Newton\", \"Newtons\", \"N\", 1],\n    [\"Dyne\", \"Dynes\", \"Dyn\", 1e-5],\n    [\"Kilogram-force\", \"Kilogram-force\", \"KgF\", 9.80665],\n    [\"Pound-force\", \"Pound-force\", \"LBF\", 4.44822],\n    [\"Poundal\", \"Poundals\", \"Pdl\", 0.1382549544],\n];\nfunction convertCreator(unitGroup, absoluteValueIndex, convert, findBest, stringToAmounts) {\n    if (stringToAmounts === void 0) { stringToAmounts = dStringToAmounts; }\n    function converter(from, toOrOptions, maybeOptions) {\n        var options = Object.assign({}, dOp, typeof toOrOptions === \"object\" ? toOrOptions : maybeOptions);\n        var to = typeof toOrOptions === \"object\" ? undefined : toOrOptions;\n        if (typeof from === \"number\") {\n            if (!to)\n                return amountToString(unitGroup, findBest\n                    ? findBest(unitGroup, [from, absoluteValueIndex], options)\n                    : [from, absoluteValueIndex], options);\n            var unitIndex = unitIndexByName(unitGroup, to);\n            var _a = convert(unitGroup, [from, absoluteValueIndex], unitIndex), value = _a[0], index = _a[1];\n            if (options.stringify)\n                return amountToString(unitGroup, [value, index], options);\n            return fix(value, options.accuracy);\n        }\n        if (typeof from === \"string\") {\n            var arr = stringToAmounts(unitGroup, from);\n            var value = 0;\n            var toIndex = to ? unitIndexByName(unitGroup, to) : absoluteValueIndex;\n            for (var i = 0; i < arr.length; i++) {\n                value += convert(unitGroup, arr[i], toIndex)[0];\n            }\n            if (!(arr.length === 1 && !to) && options.stringify)\n                return amountToString(unitGroup, [value, toIndex], options);\n            return value;\n        }\n        if (Array.isArray(from)) {\n            if (from.length < 2 || from.length & 1)\n                throw new Error(\"array must be string number pairs and have at least 1 pair\");\n            var toIndex = to ? unitIndexByName(unitGroup, to) : absoluteValueIndex;\n            var result = 0;\n            for (var i = 0; i < from.length; i += 2) {\n                var value = from[i];\n                var unitName = from[i + 1];\n                if (!(typeof value === \"number\" || typeof value === \"bigint\") ||\n                    typeof unitName !== \"string\")\n                    throw new Error(\"array must be string number pairs and have at least 1 pair\");\n                result += convert(unitGroup, [Number(value), unitIndexByName(unitGroup, unitName)], toIndex)[0];\n            }\n            if (options.stringify)\n                return amountToString(unitGroup, [result, toIndex], options);\n            return result;\n        }\n        throw new Error(\"unreachable\");\n    }\n    return converter;\n}\nexports.convertCreator = convertCreator;\nfunction dStringToAmounts(unitGroup, str) {\n    str = str.trim();\n    var regex = /([0-9.]+) ([a-zA-Z ]+)/g;\n    var arr;\n    var result = [];\n    var first = false, last = 0;\n    while ((arr = regex.exec(str)) !== null) {\n        if (!first && arr.index !== 0)\n            throw new Error(\"Invalid String: `\" + str + \"` at range 0:\" + arr.index);\n        first = true;\n        last = arr.index + arr[0].length;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        var _ = arr[0], value = arr[1], unitName = arr[2];\n        unitName = unitName.trimEnd();\n        var unitIndex = unitIndexByName(unitGroup, unitName);\n        if (unitIndex === -1)\n            throw new Error(\"Unknown Unit: '\" + unitName + \"'\");\n        result.push([Number(value), unitIndex]);\n    }\n    if (result.length === 0 || last !== str.length)\n        throw new Error(\"Invalid String: `\" + str + \"` at range \" + last + \":\" + str.length);\n    return result;\n}\nexports.dStringToAmounts = dStringToAmounts;\nfunction amountToString(unitGroup, amount, options) {\n    var _a = unitGroup[amount[1]], name = _a[0], nameWithS = _a[1], shortcut = _a[2];\n    var value = options.accuracy ? fix(amount[0], options.accuracy) : amount[0];\n    var unitName = lower(options.shortcut ? shortcut : amount[0] > 1 ? nameWithS : name, options.lowerCase);\n    return value + \" \" + unitName;\n}\nexports.amountToString = amountToString;\nfunction unitIndexByName(unitGroup, name) {\n    name = name.toLowerCase();\n    var unitIndex = unitGroup.findIndex(function (item) {\n        return item[0].toLowerCase() === name ||\n            item[1].toLowerCase() === name ||\n            item[2].toLowerCase() === name;\n    });\n    if (unitIndex === -1)\n        throw new Error(\"Unit: '\" + name + \"' Not Found\");\n    return unitIndex;\n}\nexports.unitIndexByName = unitIndexByName;\nfunction lower(str, bool) {\n    return bool ? str.toLowerCase() : str;\n}\n/** function to approximate the number passed to a certain decimal */\nfunction fix(num, decimal) {\n    var fixer = Math.pow(10, decimal);\n    return Math.round(num * fixer) / fixer;\n}\nexports.fix = fix;\nfunction convertBet(unitGroup, amount, unitIndex) {\n    return [\n        amount[0] * (unitGroup[amount[1]][3] / unitGroup[unitIndex][3]),\n        unitIndex,\n    ];\n}\nexports.convertBet = convertBet;\nfunction convertT(unitGroup, amount, unitIndex) {\n    var unit1 = unitGroup[amount[1]];\n    var unit2 = unitGroup[unitIndex];\n    var toK = amount[0] * unit1[3] + unit1[4];\n    var kToUnit = (toK - unit2[4]) / unit2[3];\n    return [kToUnit, unitIndex];\n}\nexports.convertT = convertT;\nfunction findBestBytes(_, amount, options) {\n    var value = amount[0];\n    if (value < options.base)\n        return [value, 1];\n    var finalUnitIndex = options.base === 1000 ? 6 : 11;\n    var index = options.base === 1000 ? 2 : 7;\n    value = value / options.base;\n    while (value >= options.base && index < finalUnitIndex) {\n        value = value / options.base;\n        index++;\n    }\n    return [value, index];\n}\nfunction findBest(unitGroup, amount) {\n    var index;\n    for (var i = amount[1]; i >= 0; i--) {\n        if (unitGroup[i][4] !== undefined) {\n            index = i;\n            break;\n        }\n    }\n    if (index === undefined || unitGroup[index][4] + index < amount[1])\n        return amount;\n    var value = 0, index2 = 0;\n    for (var i = index; i <= unitGroup[index][4] + index; i++) {\n        value = amount[0] * (unitGroup[amount[1]][3] / unitGroup[i][3]);\n        index2 = i;\n        var c = unitGroup[i + 1][3] / unitGroup[i][3];\n        if (c >= value && Math.abs(c - value) > 0.1)\n            return [value, i];\n    }\n    return [value, index2];\n}\nexports.findBest = findBest;\nfunction stringToAmountsDegrees(_, str) {\n    var dr = /([0-9.]+)[dÂ°](([0-9.]+)')?(([0-9.]+)'')?/g;\n    var de = /([0-9.]+)( ?)([a-zA-Z ]+)/g;\n    var result = [];\n    var arr;\n    while ((arr = de.exec(str)) !== null) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        var _3 = arr[0], value = arr[1], space = arr[2], unitName = arr[3];\n        unitName = unitName.trimEnd();\n        if (!space && unitName === \"d\")\n            continue;\n        var unitIndex = unitIndexByName(exports.degrees, unitName);\n        if (unitIndex === -1)\n            throw new Error(\"Unknown Unit: '\" + unitName + \"'\");\n        result.push([Number(value), unitIndex]);\n    }\n    while ((arr = dr.exec(str)) !== null) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        var _4 = arr[0], value1 = arr[1], _1 = arr[2], value2 = arr[3], _2 = arr[4], value3 = arr[5];\n        result.push([Number(value1), 0]);\n        if (value2)\n            result.push([Number(value2), 1]);\n        if (value3)\n            result.push([Number(value3), 2]);\n    }\n    return result;\n}\nexports.stringToAmountsDegrees = stringToAmountsDegrees;\nvar convert = {\n    temperature: convertCreator(exports.temperature, 0, convertT),\n    length: convertCreator(exports.length, 6, convertBet, findBest),\n    area: convertCreator(exports.area, 6, convertBet, findBest),\n    volume: convertCreator(exports.volume, 6, convertBet, findBest),\n    time: convertCreator(exports.time, 5, convertBet, findBest),\n    mass: convertCreator(exports.mass, 5, convertBet, findBest),\n    energy: convertCreator(exports.energy, 0, convertBet, findBest),\n    frequency: convertCreator(exports.frequency, 0, convertBet, findBest),\n    pressure: convertCreator(exports.pressure, 0, convertBet),\n    degrees: convertCreator(exports.degrees, 0, convertBet, undefined, stringToAmountsDegrees),\n    bytes: convertCreator(exports.bytes, 1, convertBet, findBestBytes),\n    force: convertCreator(exports.force, 0, convertBet)\n};\nexports[\"default\"] = convert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convert-pro/convert.js\n");

/***/ })

};
;